from collections import defaultdict

from classes.file import File
from classes.block_tokens import BlockWithTokens
from util import get_conn

def create_tables():
  q = """
  CREATE TABLE IF NOT EXISTS projects (
    id          SERIAL PRIMARY KEY,
    name        TEXT NOT NULL,
    version     TEXT,
    malicious   BOOL NOT NULL DEFAULT 'f'
  );

  CREATE TABLE IF NOT EXISTS files (
    id          SERIAL PRIMARY KEY,
    path        TEXT NOT NULL,
    hash        TEXT NOT NULL,
    malicious   BOOL NOT NULL DEFAULT 'f',
    project_id  INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE
  );

  CREATE TABLE IF NOT EXISTS blocks (
    id          SERIAL PRIMARY KEY,
    file_id     INTEGER NOT NULL REFERENCES files(id) ON DELETE CASCADE,
    hash        TEXT NOT NULL,
    start_line  INTEGER NOT NULL,
    end_line    INTEGER NOT NULL
  );

  CREATE TABLE IF NOT EXISTS tokens (
    id          SERIAL PRIMARY KEY,
    token_text  TEXT NOT NULL,
    token_count INTEGER NOT NULL,
    block_id    INTEGER NOT NULL REFERENCES blocks(id) ON DELETE CASCADE
  );

  CREATE INDEX IF NOT EXISTS projects_malicious ON projects (malicious);
  CREATE INDEX IF NOT EXISTS files_malicious ON files (malicious);
  CREATE INDEX IF NOT EXISTS files_hash ON files (hash);
  CREATE INDEX IF NOT EXISTS blocks_hash ON blocks (hash);
  """
  conn = get_conn()
  cur = conn.cursor()
  cur.execute(q)
  conn.commit()
  cur.close()


def insert_malicious_project(conn, project_name):
  q = """
  INSERT INTO projects (name, malicious) VALUES (%s, %s) RETURNING id
  """
  cur = conn.cursor()
  cur.execute(q, (project_name, True))
  project_id = cur.fetchone()[0]
  return project_id


def insert_malicious_file(conn, project_id, file_obj):
  file_q = """
  INSERT INTO files (path, hash, malicious, project_id) VALUES (%s, %s, %s, %s)
  RETURNING id
  """

  block_q = """
  INSERT INTO blocks (file_id, hash, start_line, end_line)
  VALUES (%s, %s, %s, %s)
  RETURNING id
  """

  token_q = """
  INSERT INTO tokens (token_text, token_count, block_id) VALUES (%s, %s, %s)
  """

  cur = conn.cursor()
  cur.execute(file_q, (file_obj.path, file_obj.hash, True, project_id))
  file_id = cur.fetchone()[0]
  for block in file_obj.blocks:
    cur.execute(block_q, (file_id, block.hash, block.start_line, block.end_line))
    block_id = cur.fetchone()[0]
    for token in block.tokens:
      cur.execute(token_q, (token.text, token.count, block_id))

  conn.commit()
  cur.close()


def insert_project(project_name: str, project_version: str, files: [File], conn):
  project_q = """
  INSERT INTO projects (name, version) VALUES (%s, %s) RETURNING id
  """

  file_q = """
  INSERT INTO files (path, hash, project_id) VALUES (%s, %s, %s)
  RETURNING id
  """

  block_q = """
  INSERT INTO blocks (file_id, hash, start_line, end_line)
  VALUES (%s, %s, %s, %s)
  RETURNING id
  """

  token_q = """
  INSERT INTO tokens (token_text, token_count, block_id) VALUES (%s, %s, %s)
  """

  cur = conn.cursor()
  cur.execute(project_q, (project_name, project_version))
  project_id = cur.fetchone()[0]
  
  for f in files:
    cur.execute(file_q, (f.path, f.hash, project_id))
    file_id = cur.fetchone()[0]
    for block in f.blocks:
      cur.execute(block_q, (file_id, block.hash, block.start_line, block.end_line))
      block_id = cur.fetchone()[0]
      for token in block.tokens:
        cur.execute(token_q, (token.text, token.count, block_id))

  conn.commit()
  cur.close()


def get_project_details(conn, project_id):
  q = """
  SELECT name, version
  FROM projects
  WHERE id = %s
  """
  cur = conn.cursor()
  cur.execute(q, (project_id,))
  details = cur.fetchone()
  cur.close()
  return details


def get_project_id(conn, project_name):
  q = """
  SELECT id
  FROM projects
  WHERE name = %s
  """
  cur = conn.cursor()
  cur.execute(q, (project_name,))
  response = cur.fetchone()
  cur.close()

  if response != None:
    project_id = response[0]
  else:
    project_id = None
  return project_id


def get_project_ids(conn, malicious=False):
  q = """
  SELECT id FROM projects WHERE malicious = %s
  """

  cur = conn.cursor()
  cur.execute(q, (malicious,))
  project_ids = [r[0] for r in cur.fetchall()]
  cur.close()
  return project_ids


def get_project_blocks_with_tokens(conn, project_id):
  q = """
  SELECT p.name, f.path, b.start_line, b.end_line, t.token_text, t.token_count
  FROM projects p
  INNER JOIN files f ON f.project_id = p.id
  INNER JOIN blocks b ON b.file_id = f.id
  INNER JOIN tokens t ON t.block_id = b.id
  WHERE p.id = %s
  """

  cur = conn.cursor()
  cur.execute(q, (project_id,))
  tokens = [(r[0], r[1], r[2], r[3], r[4], r[5]) for r in cur.fetchall()]
  cur.close()

  blocks_dict = defaultdict(list)
  for (name, path, start, end, t_text, t_count) in tokens:
    block_identifier = (name, path, start, end)
    blocks_dict[block_identifier].append((t_text, t_count))
  
  blocks = [BlockWithTokens(k[0], k[1], k[2], k[3], v) for k, v in blocks_dict.items()]
  return blocks


def get_project_file_hashes_and_paths(conn, project_id):
  q = """
  SELECT f.hash, f.path
  FROM projects p
  INNER JOIN files f
  ON f.project_id = p.id
  WHERE p.id = %s
  """

  cur = conn.cursor()
  cur.execute(q, (project_id,))
  hashes = [(r[0], r[1]) for r in cur.fetchall()]
  cur.close()
  return hashes


def get_project_block_hashes_and_file(conn, project_id):
  q = """
  SELECT b.hash, f.path
  FROM projects p
  INNER JOIN files f ON f.project_id = p.id
  INNER JOIN blocks b ON b.file_id = f.id
  WHERE p.id = %s
  """

  cur = conn.cursor()
  cur.execute(q, (project_id,))
  hashes = [(r[0], r[1]) for r in cur.fetchall()]
  cur.close()
  return hashes


def get_projects_with_file_hash(conn, file_hashes: list):
  q = """
  SELECT p.name, f.path, f.hash
  FROM projects p
  INNER JOIN files f ON f.project_id = p.id
  WHERE f.hash IN %s
  AND p.malicious = false
  """

  cur = conn.cursor()
  cur.execute(q, (tuple(file_hashes),))
  details = cur.fetchall()
  cur.close()
  return details


def get_projects_with_block_hash(conn, block_hashes: list):
  q = """
  SELECT p.name, f.path, b.hash, b.start_line, b.end_line
  FROM projects p
  INNER JOIN files f ON f.project_id = p.id
  INNER JOIN blocks b ON b.file_id = f.id
  WHERE b.hash IN %s
  AND p.malicious = false
  """

  cur = conn.cursor()
  cur.execute(q, (tuple(block_hashes),))
  details = cur.fetchall()
  cur.close()
  return details


def get_malicious_file_hashes(conn):
  q = """
  SELECT hash FROM files
  WHERE malicious = true
  """
  cur = conn.cursor()
  cur.execute(q)
  hashes = [r[0] for r in cur.fetchall()]
  cur.close()
  return hashes


def get_malicious_block_hashes(conn):
  q = """
  SELECT b.hash FROM blocks b
  INNER JOIN files f ON b.file_id = f.id
  WHERE f.malicious = true
  """
  cur = conn.cursor()
  cur.execute(q)
  hashes = [r[0] for r in cur.fetchall()]
  cur.close()
  return hashes
