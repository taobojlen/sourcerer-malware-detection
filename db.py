import psycopg2

from classes.file import File

conn = psycopg2.connect(dbname="sourcerer", user="sourcerer", password="sourcerer")

def create_tables():
  q = """
  CREATE TABLE IF NOT EXISTS projects (
    id          SERIAL PRIMARY KEY,
    name        TEXT NOT NULL
  );

  CREATE TABLE IF NOT EXISTS files (
    id          SERIAL PRIMARY KEY,
    path        TEXT NOT NULL,
    hash        TEXT NOT NULL,
    malicious   BOOL NOT NULL DEFAULT 'f',
    project_id  INTEGER NOT NULL REFERENCES projects(id) ON DELETE CASCADE
  );

  CREATE TABLE IF NOT EXISTS blocks (
    id          SERIAL PRIMARY KEY,
    file_id     INTEGER NOT NULL REFERENCES files(id) ON DELETE CASCADE,
    hash        TEXT NOT NULL,
    start_line  INTEGER NOT NULL,
    end_line    INTEGER NOT NULL
  );

  CREATE TABLE IF NOT EXISTS tokens (
    id          SERIAL PRIMARY KEY,
    token       TEXT NOT NULL,
    block_id    INTEGER NOT NULL REFERENCES blocks(id) ON DELETE CASCADE
  );
  """
  cur = conn.cursor()
  cur.execute(q)
  conn.commit()
  cur.close()

def insert_project(project_name: str, files: [File]):
  project_q = """
  INSERT INTO projects (name) VALUES (%s) RETURNING id
  """

  file_q = """
  INSERT INTO files (path, hash, project_id) VALUES (%s, %s, %s)
  RETURNING id
  """

  block_q = """
  INSERT INTO blocks (file_id, hash, start_line, end_line)
  VALUES (%s, %s, %s, %s)
  RETURNING id
  """

  token_q = """
  INSERT INTO tokens (token, block_id) VALUES (%s, %s)
  """

  cur = conn.cursor()
  cur.execute(project_q, (project_name))
  project_id = cur.fetchone()[0]
  
  for f in files:
    cur.execute(file_q, (f.path, f.hash, project_id))
    file_id = cur.fetchone()[0]
    for block in f.blocks:
      cur.execute(block_q, (file_id, block.hash, block.start_line, block.end_line))
      block_id = cur.fetchone()[0]
      for token in block.tokens:
        cur.execute(token_q, (token, block_id))

  conn.commit()
  cur.close()