import argparse
import sys
from itertools import chain
from collections import defaultdict

import psycopg2
from tqdm import tqdm

import db


EMPTY_FILE_MD5 = "d41d8cd98f00b204e9800998ecf8427e"


def invert_dict(dictionary):
  output = defaultdict(list)
  for project_id, hashes_and_paths in dictionary.items():
    for h, p in hashes_and_paths:
      output[h].append((project_id, p))
  return dict(output)

def detect_file_hash_matches(conn, malicious_hashes):
  # dict of hash -> list of (project ID, path) tuples
  hash_to_loc = invert_dict({i: db.get_project_file_hashes_and_paths(conn, i) for i in malicious_project_ids})
  
  matches = db.get_projects_with_file_hash(conn, malicious_hashes)
  if len(matches) == 0:
    print("No matches found.")
  for name, path, file_hash in matches:
    mal_ids_paths = hash_to_loc[file_hash]
    for malicious_id, malicious_path in mal_ids_paths:
      malicious_name, _malicious_version = db.get_project_details(conn, malicious_id)
      print("{}: {} matches malicious {}: {}".format(name, path, malicious_name, malicious_path))


def detect_block_hash_matches(conn, malicious_hashes):
  # dict of block hash -> list of (project ID, path) tuples
  hash_to_loc = invert_dict({i: db.get_project_block_hashes_and_file(conn, i) for i in malicious_project_ids})

  matches = db.get_projects_with_block_hash(conn, malicious_hashes)
  if len(matches) == 0:
    print("No matches found.")
  for name, path, block_hash, start_line, end_line in matches:
    mal_ids_paths = hash_to_loc[block_hash]
    for malicious_id, malicious_path in mal_ids_paths:
      malicious_name, _malicious_version = db.get_project_details(conn, malicious_id)
      print("{}: {} ({}-{}) matches block in malicious {}: {}".format(name, path, start_line, end_line, malicious_name, malicious_path))


if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('method', help="detection method to use. must be filehash, blockhash, or token")
  args = parser.parse_args()
  if args.method not in ['filehash', 'blockhash','token']:
    print("detection method must be filehash, blockhash, or token")
    sys.exit(1)

  conn = psycopg2.connect(dbname="sourcerer", user="sourcerer", password="sourcerer")
  malicious_project_ids = db.get_project_ids(conn, malicious=True)
  suspect_project_ids = db.get_project_ids(conn, malicious=False)
  print("Comparing {} projects to {} known malicious ones".format(len(suspect_project_ids), len(malicious_project_ids)))

  if args.method == 'filehash':
    malicious_file_hashes = db.get_malicious_file_hashes(conn)
    detect_file_hash_matches(conn, malicious_file_hashes)
  elif args.method == 'blockhash':
    pass
    malicious_block_hashes = db.get_malicious_block_hashes(conn)
    detect_block_hash_matches(conn, malicious_block_hashes)
  elif args.method == 'token':
    pass

  # malicious_tokens = [get_project_tokens(i) for i in malicious_project_ids]
