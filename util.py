import re
import hashlib
from collections import defaultdict

import psycopg2


def attempt_decode(raw_data):
  """
  Decodes utf-8 or utf-8-sig encoded bytes.
  """
  try:
    data = raw_data.decode('utf-8')
  except:
    data = raw_data.decode('utf-8-sig')

  return data


def get_hash(code):
  """
  Given a string of source code (with comments removed),
  normalizes (by removing whitespace) and returns the MD5
  hash.
  """
  cleaned_code = re.sub(r"\s+", "", code)
  hasher = hashlib.md5()
  hasher.update(cleaned_code.encode('utf-8'))
  return hasher.hexdigest()


def invert_dict(dictionary):
  output = defaultdict(list)
  for project_id, hashes_and_paths in dictionary.items():
    for h, p in hashes_and_paths:
      output[h].append((project_id, p))
  return dict(output)


def get_conn():
  return psycopg2.connect(dbname="sourcerer", user="sourcerer", password="sourcerer")
