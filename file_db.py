from pathlib import Path, PurePath

from classes.file import File

FILE_IDENT = "@@FILE@@"
BLOCK_IDENT = "@@BLOCK@@"


def get_path(project_name: str, is_malicious):
  project_name = project_name.replace("/", "--")
  project_dir = PurePath("malicious") if is_malicious else PurePath("suspect")
  project_dir = Path("processed/") / project_dir

  project_dir.mkdir(exist_ok=True, parents=True)
  return project_dir / PurePath(project_name)


def save_project(project_name: str, files: [File], is_malicious=False):
  project_path = get_path(project_name, is_malicious)
  already_exists = project_path.is_file()
  mode = "a" if already_exists else "w"

  with open(project_path, mode) as pf:
    if not already_exists:
      pf.write("{}\n".format(project_name))
    for f in files:
      pf.write("{} {}\n".format(FILE_IDENT, f.path))
      for b in f.blocks:
        pf.write("{} {} {}\n".format(BLOCK_IDENT, b.start_line, b.end_line))
        tokens = sorted(b.tokens, key=lambda t: t.count)
        for t in tokens:
          pf.write("{}@@::@@{}\n".format(t.text, t.count))


def read_project(file_path) -> [File]:
  files = []

  curr_file = None
  curr_blocks = []
  curr_tokens = []

  project_name = None

  with open(file_path, "r") as pf:
    for curr_line in pf:
      curr_line = curr_line.strip()
      # Get name from first line
      if project_name == None:
        project_name = curr_line
        continue

      if curr_line.startswith(FILE_IDENT):
        if curr_file != None:
          # New file, save the prev one
          if curr_tokens:
            curr_blocks.append(curr_tokens.copy())
          files.append((curr_file, curr_blocks.copy()))

        curr_file = curr_line.split(" ")[1]
        # Reset file
        curr_blocks = []
      elif curr_line.startswith(BLOCK_IDENT):
        # New block, save the prev one
        if curr_tokens:
          curr_blocks.append(curr_tokens.copy())
        # Reset block
        curr_tokens = []
      else:
        curr_tokens.append(curr_line)

  if curr_tokens:
    curr_blocks.append(curr_tokens.copy())
  if curr_file != None:
    files.append((curr_file, curr_blocks))
  return project_name, files
