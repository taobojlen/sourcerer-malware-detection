import argparse
import sys
import logging
from pathlib import Path, PurePath
from multiprocessing import Pool
import re

from tqdm import tqdm

from db import create_tables
from tokenizers.tokenizer import process_project, process_malicious_project


if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('--projects', help="list of project paths to import")
  parser.add_argument('--malicious', action='store_true', help="mark imported projects as malicious")

  args = parser.parse_args()
  if args.projects == None:
    print("Missing --projects flag; exiting.")
    sys.exit(1)

  create_tables()
  
  log_dir = Path("logs")
  log_dir.mkdir(parents=True, exist_ok=True)
  log_path = log_dir / PurePath("output.log")
  logging.basicConfig(
    level=logging.DEBUG,
    filename=log_path,
    format="%(asctime)s %(levelname)-8s %(message)s",
    datefmt="%Y-%m-%dT%H:%M:%S"
  )
  logger = logging.getLogger(__name__)

  if args.malicious:
    sample_dir = Path(args.projects)
    if not sample_dir.is_dir():
      print("--projects must be a directory")
      sys.exit(1)
    files = list(sample_dir.glob("*.js"))
    for file_path in tqdm(files):
      # Remove trailing numbers and dots from project name
      project_name = re.sub(r"[\d\.]+$", "", file_path.stem)
      process_malicious_project(str(file_path), project_name)

  else:
    with open(args.projects, "r") as f:
      # list of project paths
      project_paths = [p.strip() for p in f.readlines()]
    # Process everything
    errors = []
    with Pool(processes=12) as p:
      with tqdm(total=len(project_paths)) as pbar:
        for e in p.imap_unordered(process_project, project_paths):
          pbar.update()
          errors.append(e)

    errors_path = log_dir / PurePath("errors.txt")
    with open(errors_path, "w+") as f:
      for e in errors:
        if e != None:
          f.write("{}\n".format(e))
